import "allocator/arena";
import { SHA1, assert_sha1, SHA256, assert_sha256, SHA512, assert_sha512, Ripemd160, assert_ripemd160 } from "../../../src/crypto";
import {Contract} from "../../../src/contract";
import { Log } from "../../../src/log";
import { ultrain_assert } from "../../../src/utils";

const target: string = "what a wonderful world!";

// the targets are generated by "echo -n 'what a wonderful world!' | openssl sha1/sha256/sha512/ripemd160"
const SHA1TARGET = "c1d6cf2bd91e9db9ee78cbbfa72a48d590286c29";
const SHA256TARGET = "a334ea99877df09ad9acdfaead2423dbcadbd28f56f44f8df7f6369afd330e1e";
const SHA512TARGET = "ceb6944eafcc65326923e1d3e4dc2ad2d1829c081670191186d951128088a6a9e41606c535279613efb67e4bd74c13c311d339d6167ad59bf18809960c09f62c";
const RIMPTARGET = "26f3d4bca5dbde3445837e173e0d951c1859d744";

exportã€€class CryptoTest extends Contract {

    @action
    test(): void {
        let sha1 = new SHA1();
        let hash = sha1.hash(target);
        ultrain_assert(SHA1TARGET == hash, "sha1.hash failed.");
        assert_sha1(target, sha1);

        let sha256 = new SHA256();
        hash = sha256.hash(target);
        ultrain_assert(SHA256TARGET == hash, "sha256.hash failed.");
        assert_sha256(target, sha256);

        let sha512 = new SHA512();
        hash = sha512.hash(target);
        ultrain_assert(SHA512TARGET == hash, "sha512.hash failed.");
        assert_sha512(target, sha512);

        let rimp = new Ripemd160();
        hash = rimp.hash(target);
        ultrain_assert(RIMPTARGET == hash, "ripemd160.hash failed.");
        assert_ripemd160(target, rimp);
    }
}